props_id: bar
props:
  - key: data
    description: Chart data.
    type: '{Array.<Object>}'
    required: true

  - key: indexBy
    description: |
      Key to use to index the data, this key must exist in each data item.
      You can also provide a function which will receive the data item
      and must return the desired index.
    type: '{string|Function}'
    required: false
    default: defaults.indexBy

  - key: keys
    description: Keys to use to determine each serie.
    type: '{Array.<string>}'
    required: false
    default: defaults.keys

  - key: width
    scopes:
      - api
    docScopes: '*'
    help: Chart width.
    description: |
      not required if using `ResponsiveBar`.
      Also note that width excludes left/right axes,
      please add margin to make sure they're visible.
    type: '{number}'
    required: true
    control: range
    group: Base
    controlOptions:
      unit: px
      min: 100
      max: 1000
      step: 5

  - key: height
    scopes:
      - api
    docScopes: '*'
    help: Chart height.
    description: |
      not required if using `ResponsiveBar`.
      Also note that height excludes top/bottom axes,
      please add margin to make sure they're visible.
    type: '{number}'
    required: true
    control: range
    group: Base
    controlOptions:
      unit: px
      min: 100
      max: 1000
      step: 5

  - key: pixelRatio
    scopes:
      - BarCanvas
    description: Adjust pixel ratio, useful for HiDPI screens.
    required: false
    default: Depends on device
    type: '{number}'
    control: range
    group: Base
    controlOptions:
      min: 1
      max: 2

  - key: groupMode
    description: |
      How to group bars, must be one of: `grouped`, `stacked`.
    type: '{string}'
    required: false
    default: defaults.groupMode
    control: radio
    group: Base
    controlOptions:
      choices:
        - label: stacked
          value: stacked
        - label: grouped
          value: grouped

  - key: layout
    description: |
      How to display bars, must be one of: `horizontal`, `vertical`.
    type: '{string}'
    required: false
    default: defaults.layout
    control: radio
    group: Base
    controlOptions:
      choices:
        - label: horizontal
          value: horizontal
          icon: bar-horizontal
        - label: vertical
          value: vertical
          icon: bar-vertical

  - key: reverse
    description: |
      Reverse bars, starts on top instead of bottom for vertical layout
      and right instead of left for horizontal one.
    type: '{boolean}'
    required: false
    default: defaults.reverse
    control: switch
    group: Base

  - key: minValue
    description: |
      Minimum value, if 'auto', will use min value from the provided data.
    required: false
    default: defaults.minValue
    type: '{number|string}'
    control: switchableRange
    group: Base
    controlOptions:
      disabledValue: auto
      defaultValue: -1000
      min: -1000
      max: 0

  - key: maxValue
    description: |
      Maximum value, if 'auto', will use max value from the provided data.
    required: false
    default: defaults.maxValue
    type: '{number|string}'
    control: switchableRange
    group: Base
    controlOptions:
      disabledValue: auto
      defaultValue: 1000
      min: 0
      max: 1000

  - key: padding
    description: |
      Padding between each bar (ratio).
    type: '{number}'
    required: false
    default: defaults.padding
    control: range
    group: Base
    controlOptions:
      min: 0
      max: 0.9
      step: 0.05

  - key: innerPadding
    description: |
      Padding between grouped/stacked bars (px).
    type: '{number}'
    required: false
    default: defaults.innerPadding
    control: range
    group: Base
    controlOptions:
      unit: px
      min: 0
      max: 10

  - key: margin
    description: |
      Control chart's margins
    type: '{object}'
    control: margin
    group: Base

  - key: colors
    description: |
      Defines color range.
    type: '{string|Function|Array}'
    required: false
    default: nivo
    control: colors
    group: Style

  - key: colorBy
    description: |
      Property to use to determine node color.
      If a function is provided, it will receive
      current node data and must return a color.
    required: false
    default: id
    control: choices
    group: Style
    controlOptions:
      choices:
        - label: id
          value: id
        - label: index
          value: index
        - label: "({ id, data }) => data[`${id}Color`]"
          value: "({ id, data }) => data[`${id}Color`]"

  - key: borderRadius
    scopes:
      - Bar
      - api
    description: |
      Rectangle border radius (px).
    type: '{number}'
    required: false
    default: defaults.borderRadius
    control: range
    group: Style
    controlOptions:
      unit: px
      min: 0
      max: 36

  - key: borderWidth
    description: |
      Width of circle border.
    type: '{number}'
    required: false
    default: defaults.borderWidth
    control: range
    group: Style
    controlOptions:
      unit: px
      min: 0
      max: 10

  - key: borderColor
    description: |
      How to compute border color,
      [see dedicated documentation](/guides/colors).
    help: |
      Method to compute border color.
    type: '{string|Function}'
    required: false
    default: defaults.borderColor
    control: color
    group: Style
    controlOptions:
      withCustomColor: true

 #    ...defsProperties(['Bar']),

  - key: enableLabel
    description: |
      Enable/disable labels.
    type: '{boolean}'
    required: false
    default: defaults.enableLabel
    control: switch
    group: Labels

  - key: labelSkipWidth
    description: |
      Skip label if bar width is lower than provided value, ignored if 0 (px).
    type: '{number}'
    required: false
    default: defaults.labelSkipWidth
    control: range
    group: Labels
    controlOptions:
      unit: px
      min: 0
      max: 36

  - key: labelSkipHeight
    description: |
      Skip label if bar height is lower than provided value, ignored if 0 (px).
    type: '{number}'
    required: false
    default: defaults.labelSkipHeight
    control: range
    group: Labels
    controlOptions:
      unit: px
      min: 0
      max: 36

  - key: labelTextColor
    description: |
      Defines how to compute label text color.
    type: '{string|Function}'
    required: false
    default: defaults.labelTextColor
    control: color
    group: Labels
    controlOptions:
      withCustomColor: true

 #    ...axesProperties,

  - key: enableGridX
    description: |
      Enable/disable x grid.
    type: '{boolean}'
    required: false
    default: defaults.enableGridX
    control: switch
    group: Grid

  - key: gridXValues
    description: |
      Specify values to use for vertical grid lines.
    type: 'Array<{number|string}>'
    required: false

  - key: enableGridY
    description: |
      Enable/disable y grid.
    type: '{boolean}'
    required: false
    default: defaults.enableGridY
    control: switch
    group: Grid

  - key: gridYValues
    description: |
      Specify values to use for horizontal grid lines.
    type: 'Array<{number|string}>'
    required: false

  - key: isInteractive
    scopes:
      - Bar
      - BarCanvas
    description: |
      Enable/disable interactivity.
    type: '{boolean}'
    required: false
    default: defaults.isInteractive
    control: switch
    group: Interactivity

  - key: custom tooltip
    scopes:
      - Bar
      - BarCanvas
    excludeFromDoc: true
    description: |
      You can customize the tooltip using the `tooltip`
      property and `theme.tooltip` object.
    type: '{boolean}'
    control: switch
    group: Interactivity

 #        key: 'tooltip',
 #        scopes: ['Bar', 'BarCanvas'],
 #        type: '{Function}',
 #        required: false,
 #        description: (
 #            <div>
 #                A function allowing complete tooltip customisation, it must return a valid HTML
 #                element and will receive the following data:
 #                <pre className="code code-block">
 #                    {dedent`
 #                        {
 #                            id:         {string|number},
 #                            value:      {number},
 #                            index:      {number},
 #                            indexValue: {string|number},
 #                            color:      {string},
 #                            // datum associated to the current index (raw data)
 #                            data:       {object}
 #                        }
 #                    `}
 #                </pre>
 #            </div>
 #        ),
 #    },
 #    {
 #        key: 'onClick',
 #        scopes: ['Bar', 'BarCanvas'],
 #        type: '{Function}',
 #        required: false,
 #        description: (
 #            <div>
 #                onClick handler, will receive node data as first argument & event as second one. The
 #                node data has the following shape:
 #                <pre className="code code-block">
 #                    {dedent`
 #                        {
 #                            id:         {string|number},
 #                            value:      {number},
 #                            index:      {number},
 #                            indexValue: {string|number},
 #                            color:      {string},
 #                            // datum associated to the current index (raw data)
 #                            data:       {object}
 #                        }
 #                    `}
 #                </pre>
 #            </div>
 #        ),
 #    },
 #    {
 #        key: 'legends',
 #        scopes: ['Bar'],
 #        type: '{Array<object>}',
 #        description: `Optional chart's legends.`,
 #        group: 'Legends',
 #        control: 'array',
 #        controlOptions: {
 #            props: getLegendsProps(),
 #            shouldCreate: true,
 #            addLabel: 'add legend',
 #            shouldRemove: true,
 #            defaults: {
 #                dataFrom: 'keys',
 #                anchor: 'top-left',
 #                direction: 'column',
 #                justify: false,
 #                translateX: 0,
 #                translateY: 0,
 #                itemWidth: 100,
 #                itemHeight: 20,
 #                itemsSpacing: 0,
 #                symbolSize: 20,
 #                itemDirection: 'left-to-right',
 #                onClick: data => {
 #                    alert(JSON.stringify(data, null, '    '))
 #                },
 #            },
 #        },
 #    },